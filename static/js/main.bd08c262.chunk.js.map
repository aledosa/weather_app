{"version":3,"sources":["components/screens/WeatherScreen.js","App.js","reportWebVitals.js","index.js"],"names":["api","WeatherScreen","srcWeather","useState","query","updateQuery","weather","updateWeather","className","main","placeholder","type","value","onChange","e","target","onKeyPress","evt","key","fetch","then","res","json","result","name","sys","country","srcDate","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","feels_like","description","Root","to","App","exact","component","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yMACMA,EACC,mCADDA,EAEE,2CA6HOC,MA1Hf,WAA0B,IAgDGC,EAhDJ,EACMC,mBAAS,IADf,mBAChBC,EADgB,KACTC,EADS,OAEUF,mBAAS,IAFnB,mBAEhBG,EAFgB,KAEPC,EAFO,KAoEvB,OACE,qBACEC,UACyB,oBAAhBF,EAAQG,MAvBMP,EAwBCI,EAAQA,QAAQ,GAAGG,KAvB1B,UAAfP,EACK,YAGU,WAAfA,EACK,aAGU,SAAfA,EACK,WAGU,SAAfA,GAAwC,YAAfA,EACpB,YAGF,OAQC,MAJR,SAOE,iCACE,qBAAKM,UAAU,aAAf,SACE,uBACEA,UAAU,aACVE,YAAY,aACZC,KAAK,OACLC,MAAOR,EACPS,SAAU,SAACC,GAAD,OAAOT,EAAYS,EAAEC,OAAOH,QACtCI,WAhFK,SAACC,GACE,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IACvDoB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLhB,EAAcgB,GACdlB,EAAY,YA6EU,oBAAhBC,EAAQG,KACd,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQkB,KADX,KACmBlB,EAAQmB,IAAIC,WAE/B,qBAAKlB,UAAU,OAAf,SA9EQ,SAACmB,GACnB,IAwBIC,EATO,CACT,SACA,SACA,YACA,WACA,SACA,YAGaD,EAAQE,UACnBC,EAAOH,EAAQI,UACfC,EA1BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAciBL,EAAQM,YACvBC,EAAOP,EAAQQ,cAEnB,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAgDDE,CAAY,IAAIC,WAEzC,sBAAK7B,UAAU,cAAf,UACE,sBAAKA,UAAU,cAAf,UACG8B,KAAKC,MAAMjC,EAAQG,KAAK+B,MAD3B,cAGA,sBAAKhC,UAAU,kBAAf,wBACc8B,KAAKC,MAAMjC,EAAQG,KAAKgC,YADtC,cAGA,qBAAKjC,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGoC,iBAE/C,qBAAKlC,UAAU,gBAAf,SACE,qBAAKA,UAAU,iBAAf,8DAMJ,qBAAKA,UAAU,sBAAf,SACE,qBAAKA,UAAU,iBAAf,iEClHNmC,EAAO,WACX,OAAO,cAAC,IAAD,CAAUC,GAAG,kBAcPC,MAXf,WACE,OACE,cAAC,WAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,UAAWJ,EAAMK,KAAK,MACnC,cAAC,IAAD,CAAOD,UAAW9C,EAAe+C,KAAK,uBCD/BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.bd08c262.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nconst api = {\n  key: \"2add350b8e05c436a835ee7e3b10cb2c\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction WeatherScreen() {\n  const [query, updateQuery] = useState(\"\");\n  const [weather, updateWeather] = useState({});\n\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          updateWeather(result);\n          updateQuery(\"\");\n        });\n    }\n  };\n\n  const dateBuilder = (srcDate) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    let day = days[srcDate.getDay()];\n    let date = srcDate.getDate();\n    let month = months[srcDate.getMonth()];\n    let year = srcDate.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  const weatherValidation = (srcWeather) => {\n    if (srcWeather === \"Clear\") {\n      return \"app clear\";\n    }\n\n    if (srcWeather === \"Clouds\") {\n      return \"app cloudy\";\n    }\n\n    if (srcWeather === \"Mist\") {\n      return \"app mist\";\n    }\n\n    if (srcWeather === \"Rain\" || srcWeather === \"Drizzle\") {\n      return \"app rainy\";\n    }\n\n    return \"app\";\n  };\n\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weatherValidation(weather.weather[0].main)\n          : \"app\"\n      }\n    >\n      <main>\n        <div className=\"search-box\">\n          <input\n            className=\"search-bar\"\n            placeholder=\"Search ...\"\n            type=\"text\"\n            value={query}\n            onChange={(e) => updateQuery(e.target.value)}\n            onKeyPress={search}\n          />\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temperature\">\n                {Math.round(weather.main.temp)} ˚C\n              </div>\n              <div className=\"temp-senstation\">\n                Feels like {Math.round(weather.main.feels_like)} ˚C\n              </div>\n              <div className=\"weather\">{weather.weather[0].description}</div>\n            </div>\n            <div className=\"copyright-box\">\n              <div className=\"copyright-text\">\n                Images are property of Alexa Dominguez ®\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"copyright-container\">\n            <div className=\"copyright-text\">\n              Images are property of Alexa Dominguez ®\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default WeatherScreen;\n","import * as React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport WeatherScreen from \"./components/screens/WeatherScreen\";\n\nconst Root = () => {\n  return <Redirect to=\"/weather_app\" />;\n};\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Switch>\n        <Route exact component={Root} path=\"/\" />\n        <Route component={WeatherScreen} path=\"/weather_app\" />\n      </Switch>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}